pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

function noop() end

local catch_fudge=1
local left_wall_x=0
local right_wall_x=127
local ground_y=110

-- what to do next
-- - jugglers can catch and throw balls

-- balls update first
-- then jugglers update
--   1. throw
--   2. catch
-- balls can die now


-- todo ball shouldn't slide along ground for 2 frames

local entities
local new_entities
local balls

local entity_classes={
	juggler={
		update_priority=1,
		width=14,
		height=8,
		move_x=0,
		left_hand_ball=nil,
		right_hand_ball=nil,
		init=function(self)
			self:calc_hand_hitboxes()
		end,
		update=function(self)
			-- move horizontally when left/right buttons are pressed
			self.move_x=ternary(btn(1,2-self.player_num),1,0)-
				ternary(btn(0,2-self.player_num),1,0)
			self.vx=3*self.move_x
			self:apply_velocity()
			-- keep the juggler in bounds
			if self.x<self.min_x then
				self.x=self.min_x
				self.vx=max(0,self.vx)
			elseif self.x>self.max_x-self.width then
				self.x=self.max_x-self.width
				self.vx=min(0,self.vx)
			end
			-- debug: spawn balls
			if btnp(4,2-self.player_num) then
				local ball=spawn_entity("ball",self.x,self.y)
				ball:throw(60,100,40)
			end
			-- catch balls
			self:calc_hand_hitboxes()
			local ball
			for ball in all(balls) do
				-- if self.left_hand_hitbox then
			end
		end,
		draw=function(self)
			self:draw_outline(14)
			if self.left_hand_hitbox!=nil then
				rect(self.left_hand_hitbox.x+0.5,self.left_hand_hitbox.y+0.5,self.left_hand_hitbox.x+self.left_hand_hitbox.width-0.5,self.left_hand_hitbox.y+self.left_hand_hitbox.height-0.5,7)
			end
			if self.right_hand_hitbox!=nil then
				rect(self.right_hand_hitbox.x+0.5,self.right_hand_hitbox.y+0.5,self.right_hand_hitbox.x+self.right_hand_hitbox.width-0.5,self.right_hand_hitbox.y+self.right_hand_hitbox.height-0.5,7)
			end
			-- rect(self.x+0.5,self.y+0.5,self.x+self.width/2-0.5,self.y+self.height-0.5,7)
			-- rect(self.x+self.width/2+0.5,self.y+0.5,self.x+self.width-0.5,self.y+self.height-0.5,10)
		end,
		calc_hand_hitboxes=function(self)
			if self.left_hand_ball then
				self.left_hand_hitbox=nil
			else
				self.left_hand_hitbox={
					x=self.x,
					y=self.y+1,
					width=self.width/2,
					height=self.height-1
				}
				if self.vx<0 then
					self.left_hand_hitbox.x+=self.vx
					self.left_hand_hitbox.width-=self.vx
				else
					self.left_hand_hitbox.x-=catch_fudge
					self.left_hand_hitbox.width+=catch_fudge
				end
				if self.right_hand_ball then
					if self.vx>0 then
						self.left_hand_hitbox.width+=self.vx
					else
						self.left_hand_hitbox.width+=catch_fudge
					end
				end
			end
			if self.right_hand_ball then
				self.right_hand_hitbox=nil
			else
				self.right_hand_hitbox={
					x=self.x+self.width/2,
					y=self.y+1,
					width=self.width/2,
					height=self.height-1
				}
				if self.vx>0 then
					self.right_hand_hitbox.width+=self.vx
				else
					self.right_hand_hitbox.width+=catch_fudge
				end
				if self.left_hand_ball then
					if self.vx<0 then
						self.right_hand_hitbox.x+=self.vx
						self.right_hand_hitbox.width-=self.vx
					else
						self.right_hand_hitbox.x-=catch_fudge
						self.right_hand_hitbox.width+=catch_fudge
					end
				end
			end
		end
	},
	ball={
		update_priority=2,
		width=5,
		height=5,
		gravity=0,
		freeze_frames=0,
		add_to_game=function(self)
			add(balls,self)
		end,
		remove_from_game=function(self)
			del(balls,self)
		end,
		init=function(self)
			self:calc_hurtbox()
			self.energy=self.vy*self.vy/2+self.gravity*(ground_y-self.y-self.height)
		end,
		update=function(self)
			if self.freeze_frames>0 then
				decrement_counter_prop(self,"freeze_frames")
			else
				self.vy+=self.gravity
				self:apply_velocity()
				self:calc_hurtbox()
				-- bounce off walls
				if self.x<left_wall_x then
					self.x=left_wall_x
					self:calc_hurtbox()
					if self.vx<0 then
						self.vx*=-1
					end
				elseif self.x>right_wall_x-self.width+1 then
					self.x=right_wall_x-self.width+1
					self:calc_hurtbox()
					if self.vx>0 then
						self.vx*=-1
					end
				end
				-- bounce off the ground
				if self.y>ground_y-self.height then
					self.y=ground_y-self.height
					self:calc_hurtbox()
					if self.vy>0 then
						-- we do this so that balls don't lose energy over time
						self.vy=-sqrt(2*self.energy)
					end
				end
			end
		end,
		post_update=function(self)
			-- balls that hit the ground go away
			-- if self.y>=ground_y-self.height then
			-- 	self:die()
			-- end
		end,
		draw=function(self)
			-- draw the ball as blue always
			local i
			for i=1,15 do
				pal(i,12)
			end
			palt(1,true)
			-- if it's going slow, just draw an undeformed ball
			local speed=sqrt(self.vx*self.vx+self.vy*self.vy)
			if speed<5 then
				draw_sprite(0,48,5,5,self.x,self.y)
			-- otherwise draw a deformed version
			else
				local angle=atan2(self.vx,self.vy)
				local flip_horizontal=(self.vx<0)
				local flip_vertical=(self.vy>0)
				-- figure out which sprite we're going to use
				local sprite_num=flr(24*angle+0.5)
				if flip_vertical then
					sprite_num=24-sprite_num
				end
				if flip_horizontal then
					sprite_num=12-sprite_num
				end
				-- find the right sprite location based on angle
				local sy,sw,sh
				if sprite_num==0 then
					sy,sw,sh=123,16,5
				elseif sprite_num==1 then
					sy,sw,sh=117,15,6
				elseif sprite_num==2 then
					sy,sw,sh=108,13,9
				elseif sprite_num==3 then
					sy,sw,sh=97,11,11
				elseif sprite_num==4 then
					sy,sw,sh=84,9,13
				elseif sprite_num==5 then
					sy,sw,sh=69,6,15
				elseif sprite_num==6 then
					sy,sw,sh=53,5,16
				end
				-- find the right sprite location based on speed
				local sx=mid(0,flr((speed-5)/9),3)*sw
				local x,y=self.x,self.y
				-- handle the other 270 degrees
				if not flip_horizontal then
					x+=self.width-sw
				end
				if flip_vertical then
					y+=self.height-sh
				end
				-- draw the sprite
				draw_sprite(sx,sy,sw,sh,x,y,flip_horizontal,flip_vertical)
			end
		end,
		throw=function(self,distance,height,duration)
			-- let's do some fun math to calculate out the trajectory
			-- duration must be <=180, otherwise overflow will ruin the math
			-- it looks best if duration is an even integer (you get to see the apex)
			local n=(duration+1)*duration/2
			local m=(duration/2+1)*duration/4
			self.vy=n/(m-n/2)
			self.vy*=height/duration
			self.gravity=-self.vy*duration/n
			self.vx=distance/duration
			-- calculate kinetic and potential energy
			self.energy=self.vy*self.vy/2+self.gravity*(ground_y-self.y-self.height)
		end,
		calc_hurtbox=function(self)
			self.hurtbox={
				x=self.x,
				y=self.y,
				width=self.width,
				height=self.height
			}
			if self.vy>0 then
				self.hurtbox.y-=self.vy
				self.hurtbox.height+=self.vy
			elseif self.vy<0 then
				self.hurtbox.height-=self.vy
			end
			if self.vx<0 then
				self.hurtbox.width+=mid(0,-self.vx,2)
			end
			if self.vx>0 then
				self.hurtbox.x-=mid(0,self.vx,2)
				self.hurtbox.width+=mid(0,self.vx,2)
			end
		end
	},
	ball_spawner={}
}

function _init()
	entities={}
	new_entities={}
	balls={}
	spawn_entity("juggler",10,ground_y-entity_classes.juggler.height,{
		player_num=1,
		min_x=left_wall_x,
		max_x=64
	})
	spawn_entity("juggler",80,ground_y-entity_classes.juggler.height,{
		player_num=2,
		min_x=64,
		max_x=right_wall_x
	})
	local ball=spawn_entity("ball",10,100)--,{vx=-0.001,vy=1})
	ball:throw(80,80,7)
	-- add new entities to the game
	add_new_entities()
end

-- local skip_frames=0
function _update()
	-- skip_frames+=1
	-- if skip_frames%30>0 then return end

	-- sort entities for updating
	sort(entities,function(entity1,entity2)
		return entity1.update_priority>entity2.update_priority
	end)
	-- update each entity
	local entity
	for entity in all(entities) do
		increment_counter_prop(entity,"frames_alive")
		entity:update()
		if decrement_counter_prop(entity,"frames_to_death") then
			entity:die()
		end
	end
	for entity in all(entities) do
		entity:post_update()
	end
	-- add new entities to the game
	add_new_entities()
	-- filter out dead entities
	for entity in all(entities) do
		if not entity.is_alive then
			del(entities,entity)
			entity:remove_from_game()
		end
	end
	-- sort entities for rendering
	sort(entities,function(entity1,entity2)
		return entity1.render_layer>entity2.render_layer
	end)
end

function _draw()
	-- clear the screen
	cls()
	-- draw the sky
	rectfill(left_wall_x,0,right_wall_x,127,1)
	pset(left_wall_x,0,0)
	pset(right_wall_x,0,0)
	-- draw each entity
	local entity
	foreach(entities,function(entity)
		entity:draw()
		pal()
	end)
	-- draw the ground
	rectfill(0,ground_y,127,127,0)
	pset(left_wall_x,ground_y-1,0)
	pset(right_wall_x,ground_y-1,0)
	pset(63,ground_y-1,0)
	pset(64,ground_y-1,0)
end

function spawn_entity(class_name,x,y,args,skip_init)
	local entity
	local the_class=entity_classes[class_name]
	if the_class.extends then
		entity=spawn_entity(the_class.extends,x,y,args,true)
	else
		-- create default entity
		entity={
			is_alive=true,
			frames_alive=0,
			frames_to_death=0,
			update_priority=0,
			render_layer=0,
			x=x or 0,
			y=y or 0,
			vx=0,
			vy=0,
			width=0,
			height=0,
			add_to_game=noop,
			remove_from_game=noop,
			init=noop,
			update=function()
				self:apply_velocity()
			end,
			post_update=noop,
			draw=noop,
			draw_outline=function(self,color)
				rect(self.x+0.5,self.y+0.5,
					self.x+self.width-0.5,self.y+self.height-0.5,color or 8)
			end,
			die=function(self)
				if self.is_alive then
					self:on_death()
					self.is_alive=false
				end
			end,
			on_death=noop,
			apply_velocity=function(self)
				self.x+=self.vx
				self.y+=self.vy
			end
		}
	end
	-- add class properties/methods onto it
	local k,v
	for k,v in pairs(the_class) do
		entity[k]=v
	end
	-- add properties onto it from the arguments
	for k,v in pairs(args or {}) do
		entity[k]=v
	end
	if not skip_init then
		-- initialize it
		entity:init()
		add(new_entities,entity)
	end
	-- return it
	return entity
end

function add_new_entities()
	local entity
	for entity in all(new_entities) do
		add(entities,entity)
		entity:add_to_game()
	end
	new_entities={}
end

-- if condition is true return the second argument, otherwise the third
function ternary(condition,if_true,if_false)
	return condition and if_true or if_false
end

-- increment a counter, wrapping to 20000 if it risks overflowing
function increment_counter(n)
	return n+ternary(n>32000,-12000,1)
end

-- increment_counter on a property of an object
function increment_counter_prop(obj,k)
	obj[k]=increment_counter(obj[k])
end

-- decrement a counter but not below 0
function decrement_counter(n)
	return max(0,n-1)
end

-- decrement_counter on a property of an object, returns true when it reaches 0
function decrement_counter_prop(obj,k)
	if obj[k]>0 then
		obj[k]=decrement_counter(obj[k])
		return obj[k]<=0
	end
end

-- filter out anything in list for which func is false
-- function filter(list,func)
-- 	local item
-- 	for item in all(list) do
-- 		if not func(item) then
-- 			del(list,item)
-- 		end
-- 	end
-- end

-- bubble sorts a list according to a comparison func
function sort(list,func)
	local i
	for i=1,#list do
		local j=i
		while j>1 and func(list[j-1],list[j]) do
			list[j],list[j-1]=list[j-1],list[j]
			j-=1
		end
	end
end

-- check to see if two axis-aligned rectangles are overlapping
function rects_overlapping(x1,y1,w1,h1,x2,y2,w2,h2)
	if type(x2)=="table" then
		x2,y2,w2,h2=x2.x,x2.y,x2.width,x2.height
	elseif type(y1)=="table" then
		x2,y2,w2,h2=y1.x,y1.y,y1.width,y1.height
	end
	if type(x1)=="table" then
		x1,y1,w1,h1=x1.x,x1.y,x1.width,x1.height
	end
	return x1+w1>x2 and x2+w2>x1 and y1+h1>y2 and y2+h2>y1
end

function draw_sprite(sx,sy,sw,sh,x,y,...)
	sspr(sx,sy,sw,sh,x+0.5,y+0.5,sw,sh,...)
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1ccc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1ccc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11bb11aaa11191111811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1bbb11aaaa1999118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbaaaaa1999118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbaaaa11999118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbb1aaa11999118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1bbb11aaa11999118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1bb111aaa11999118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000001aa111999118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000011a111999118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000011a111991118811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001191111811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001191111811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000011811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000011811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000011811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000011811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111bb1111aa111199111118100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11bbbb11aaaa11199911188800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11bbbb11aaaa11999911188800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1bbbbb1aaaaa11999111888100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1bbbb11aaaa111999111888100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1bbbb11aaa1111991111888100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11bb111aaa1111991111881100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001aa11119911111881111ccccc1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001a11111991111881111ccccccc100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000001911111881111ccccccc100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000019111118111111ccccc1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000018111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000081111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000811111ccccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000811111ccccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111111bbb111111aaa11111119911111118800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111bbbb11111aaaa11111199911111188800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111bbbbb11111aaaa11111999911111888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111bbbb11111aaaa111111999111111888100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111bbbb11111aaa11111199911111188881111111cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111bbb111111aa1111111991111111881111cc111cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001111a1111111999111111881111cccc11cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000111a11111111991111111811111cccc11cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000111911111111811111cccc11cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000119111111118111111cccc11cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000181111111cccc11cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000001811111111cc111cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000811111111111111cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111bbbb11111111aaa1111111199911111111188000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111bbbb1111111aaaa1111111999911111118888000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111111bbbbb111111aaaaa1111111999911111118881000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111111bbbb1111111aaaa11111119999111111188881000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111111bbbb111111aaa1111111199911111111888111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000011111a111111111999111111111881111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000001111a1111111111911111111118811111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000001119111111111181111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000011811111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000018111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000081111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111111bbb1111111111aaa111111111199911111111118880000000000000000000000000000000000000000000000000000000000000000000000000000
11111111bbbbb111111111aaaa111111111999911111111888880000000000000000000000000000000000000000000000000000000000000000000000000000
1111111bbbbbb11111111aaaaa111111119999111111111888810000000000000000000000000000000000000000000000000000000000000000000000000000
1111111bbbbb11111111aaaaa1111111999991111111118888110000000000000000000000000000000000000000000000000000000000000000000000000000
1111111bbbb11111111aaaa111111119999111111111188811110000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000011111a1111111111199911111111118881111110000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000111911111111111181111111110000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000018811111111110000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000081111111111110000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111bbb111111111111aaa111111111111199111111111111188100000000000000000000000000000000000000000000000000000000000000000000
111111111bbbbbb1111111111aaaaa11111111119999911111111188888800000000000000000000000000000000000000000000000000000000000000000000
11111111bbbbbbb11111111aaaaaaa11111111999999911111118888888100000000000000000000000000000000000000000000000000000000000000000000
11111111bbbbbb11111111aaaaaaa111111199999991111111888888811100000000000000000000000000000000000000000000000000000000000000000000
111111111bbb111111111aaaaaa11111119999111111111188881111111100000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000088811111111111100000000000000000000000000000000000000000000000000000000000000000000
11111111111bbb111111111111111aa1111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
1111111111bbbbbb111111111aaaaaaa111111199999999111111118888888810000000000000000000000000000000000000000000000000000000000000123
111111111bbbbbbb111111aaaaaaaaaa111199999999999988888888888888880000000000000000000000000000000000000000000000000000000000004567
111111111bbbbbb111111111aaaaaaaa1111119999999991111111888888888100000000000000000000000000000000000000000000000000000000000089ab
11111111111bbb11111111111111aa1111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000cdef
